{"version":3,"sources":["components/Filter/index.js","components/Settings/index.js","components/chart/PieChart.js","components/Table/index.js","containers/App.js","store/actions.js","store/constants.js","serviceWorker.js","store/reducers.js","index.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","Filter","props","classes","menuItems","values","map","value","MenuItem","key","FormControl","variant","className","InputLabel","id","label","Select","labelId","onChange","handleChange","disabled","Settings","selectedContinent","continents","changeContinentSetting","isDisabled","selectedMetric","changeMetricSetting","selectedChartMaxValue","changeChartMaxSetting","PieChart","state","options","this","drawChart","prevProps","_","isEqual","data","metric","chartMaxValue","sort","a","b","Number","arrayData","i","push","name","countryName","y","length","sum","chart","type","title","text","series","createDataArray","setState","highcharts","Highcharts","React","Component","descendingComparator","orderBy","EnhancedTable","useState","order","setOrder","setOrderBy","selected","setSelected","rows","metricValue","countryCode","continent","totalMetric","forEach","row","headCells","numeric","disablePadding","toUpperCase","createSortHandler","property","event","handleRequestSort","Paper","TableContainer","Table","aria-labelledby","size","aria-label","TableHead","TableRow","headCell","TableCell","padding","sortDirection","style","fontWeight","TableSortLabel","active","direction","onClick","TableBody","array","comparator","stabilizedThis","el","index","stableSort","getComparator","isItemSelected","indexOf","hover","selectedIndex","newSelected","concat","slice","handleClick","aria-checked","tabIndex","align","App","isFilterDisabled","geoData","GoButtonClicked","bind","getContinents","e","target","updatedData","changeContinentData","singleData","duplicateValuesArray","d","Set","getFetchData","Button","color","isPending","CircularProgress","connect","dispatch","fetch","then","response","json","catch","error","payload","Boolean","window","location","hostname","match","initialState","names","reducer","action","Object","assign","geonames","ReactDOM","render","store","createStore","applyMiddleware","thunk","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.99d1d355.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst Filter = (props) => {\r\n    const classes = useStyles();\r\n    const menuItems = props.values.map((value) => {\r\n        return <MenuItem key={value} value={value}>{value}</MenuItem>\r\n    });\r\n    return(\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">{props.label}</InputLabel>\r\n            <Select\r\n            labelId=\"demo-simple-select-outlined-label\"\r\n            id=\"demo-simple-select-outlined\"\r\n            value={props.value}\r\n            onChange={props.handleChange}\r\n            label={props.label}\r\n            disabled={props.disabled}\r\n            >\r\n            {menuItems}\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\nimport Filter  from '../Filter';\r\n\r\nconst Settings = (props) => {\r\n    return(\r\n        <div>\r\n            {<Filter\r\n            label={\"Continent\"}\r\n            value={props.selectedContinent}\r\n            values={[\"ALL\", ...props.continents]}\r\n            handleChange={props.changeContinentSetting}\r\n            disabled={props.isDisabled}\r\n            />}\r\n            <Filter\r\n            label={\"Metric\"}\r\n            value={props.selectedMetric}\r\n            values={[\"ALL\", \"areaInSqKm\", \"population\"]}\r\n            handleChange={props.changeMetricSetting}\r\n            disabled={props.isDisabled}\r\n            />\r\n            <Filter\r\n            label={\"Max results\"}\r\n            value={props.selectedChartMaxValue}\r\n            values={[5, 10, 15, 20]}\r\n            handleChange={props.changeChartMaxSetting}\r\n            disabled={props.isDisabled}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport _ from 'lodash';\r\nclass PieChart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawChart();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if (!_.isEqual(prevProps, this.props)) {\r\n        this.drawChart();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Create the array of objects for the data of the pie\r\n     * @param {object} data \r\n     * @param {string} parameter\r\n     * @param {integer} chartMaxValue\r\n     */\r\n    createDataArray(data, metric, chartMaxValue) {\r\n        // First we sort the arrays with the first having the biggest values of the metric\r\n        data.sort(function (a, b) {\r\n          return Number(b[metric]) - Number(a[metric]);\r\n        });\r\n        \r\n        let arrayData = [];\r\n        for (let i = 0; i < chartMaxValue; i++) { // We calculate first the data for the first countries \r\n          if (data[i]) { // Check just in case we have surpassed the number of existing countries\r\n            arrayData.push({ name: data[i].countryName, y: Number(data[i][metric])});\r\n          }\r\n        } \r\n\r\n        if (chartMaxValue < data.length) { // Control to check if the max value is beyond the number  of existing countries\r\n          let sum = 0;\r\n          for (let i = chartMaxValue; i < data.length; i++) { \r\n            sum += Number(data[i][metric])\r\n          }\r\n          arrayData.push({ name: \"Other\", y: sum}); // this is the last item which is the amount of the rest of the coutries\r\n        } \r\n        \r\n        return arrayData;\r\n    }\r\n\r\n    drawChart() {\r\n        const { data, selectedMetric, selectedChartMaxValue } = this.props;\r\n        const dataArray = this.createDataArray(data, selectedMetric, selectedChartMaxValue);\r\n        // dataArray = \r\n        const options = {\r\n            chart: {\r\n              type: 'pie'\r\n            },\r\n            title: {\r\n              text: selectedMetric\r\n            },\r\n            series: [\r\n              {\r\n                data: dataArray\r\n              }\r\n            ]\r\n        };\r\n        this.setState({ options });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <HighchartsReact highcharts={Highcharts} options={this.state.options} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PieChart;","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\nexport default function EnhancedTable(props) {\r\n    const { selectedChartMaxValue, data, metric } = props;\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState();\r\n    const [selected, setSelected] = React.useState([]);\r\n\r\n    data.sort(function (a, b) {\r\n        return Number(b[metric]) - Number(a[metric]);\r\n    });\r\n\r\n    let rows = []\r\n    let metricValue = metric;\r\n    if (metric === \"ALL\") metricValue = \"population\"; // I didnt understand from the description so if the metric is \"ALL\" I set it to population\r\n    for (let i = 0; i < selectedChartMaxValue; i++) {\r\n        if (data[i]) {\r\n            rows.push({ \r\n                countryCode: data[i].countryCode,\r\n                continent: data[i].continent,\r\n                countryName: data[i].countryName,\r\n                [metric]: Number(data[i][metricValue])\r\n            });\r\n        }\r\n    }\r\n    \r\n    let totalMetric = 0;\r\n    rows.forEach((row) => {\r\n        totalMetric += row[metric];\r\n    });\r\n  \r\n    const headCells = [\r\n        { id: 'continent', numeric: true, disablePadding: false, label: 'CONTINENT' },\r\n        { id: 'countryName', numeric: true, disablePadding: false, label: 'COUNTRYNAME' },\r\n        { id: metric, numeric: true, disablePadding: false, label: metric.toUpperCase() },\r\n    ];\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const createSortHandler = property => event => {\r\n        handleRequestSort(event, property);\r\n        };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n        newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n        newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n        newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n        newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1),\r\n        );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const isSelected = name => selected.indexOf(name) !== -1;\r\n\r\n    return (\r\n        <div>\r\n        <Paper>\r\n            <TableContainer>\r\n            <Table\r\n                aria-labelledby=\"tableTitle\"\r\n                size='medium'\r\n                aria-label=\"enhanced table\"\r\n            >\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {headCells.map(headCell => (\r\n                        <TableCell\r\n                            key={headCell.id}\r\n                            padding={headCell.disablePadding ? 'none' : 'default'}\r\n                            sortDirection={orderBy === headCell.id ? order : false}\r\n                            style={{fontWeight: \"bold\"}}\r\n                        >\r\n                            <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                            >\r\n                            {headCell.label}\r\n                            \r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {stableSort(rows, getComparator(order, orderBy))\r\n                    .map((row) => {\r\n                    const isItemSelected = isSelected(row.name);\r\n\r\n                    return (\r\n                        <TableRow\r\n                        hover\r\n                        onClick={event => handleClick(event, row.countryName)}\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={row.countryCode}\r\n                        selected={isItemSelected}\r\n                        >\r\n                        <TableCell>{row.continent}</TableCell>\r\n                        <TableCell>{row.countryName}</TableCell>\r\n                        <TableCell align=\"right\">{row[metric]}</TableCell>\r\n                        </TableRow>\r\n                    );\r\n                    })}\r\n                    <TableRow>\r\n                        <TableCell></TableCell>\r\n                        <TableCell style={{fontWeight: \"bold\"}}>TOTAL</TableCell>\r\n                        <TableCell align=\"right\">{totalMetric}</TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n            </TableContainer>\r\n        </Paper>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport { getFetchData } from '../store/actions';\r\nimport Settings from '../components/Settings';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport _ from 'lodash';\r\nimport PieChart from '../components/chart/PieChart';\r\nimport StatisticsTable from '../components/Table';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedContinent: \"ALL\",\r\n      selectedMetric: \"ALL\",\r\n      selectedChartMaxValue: 5,\r\n      continents: [],\r\n      isFilterDisabled: true,\r\n      geoData: []\r\n    }\r\n    this.GoButtonClicked = this.GoButtonClicked.bind(this);\r\n    this.changeContinentSetting = this.changeContinentSetting.bind(this);\r\n    this.changeChartMaxSetting = this.changeChartMaxSetting.bind(this);\r\n    this.changeMetricSetting = this.changeMetricSetting.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (!_.isEqual(prevProps.geoData, this.props.geoData)) {\r\n      this.setState({ geoData: this.props.geoData }, () => {\r\n        this.getContinents(this.state.geoData);\r\n      });\r\n    }\r\n  }\r\n\r\n  changeContinentSetting(e) {\r\n    const continent = e.target.value;\r\n    const updatedData = this.changeContinentData(continent);\r\n    this.setState({ selectedContinent: continent, geoData: updatedData });\r\n  }\r\n\r\n  changeContinentData(selectedContinent) { // we\r\n    const { geoData } = this.props; \r\n    let updatedData = [];\r\n    if (selectedContinent === \"ALL\") {\r\n      updatedData = geoData;\r\n    } else {\r\n      geoData.forEach((singleData) => {\r\n        if (singleData.continent === selectedContinent) updatedData.push(singleData);\r\n      });\r\n    } \r\n\r\n    return updatedData;\r\n  }\r\n\r\n  changeMetricSetting(e) {\r\n    const metric = e.target.value;\r\n    this.setState({ selectedMetric: metric });\r\n  }\r\n\r\n  changeChartMaxSetting(e) {\r\n    const chartMaxValue = e.target.value;\r\n    this.setState({ selectedChartMaxValue: chartMaxValue });\r\n  }\r\n\r\n  getContinents(data) {\r\n    const duplicateValuesArray = data.map((d) => d.continent);\r\n    const continents = [...new Set(duplicateValuesArray.sort())];\r\n    this.setState({ continents });\r\n  }\r\n\r\n  GoButtonClicked() {\r\n    this.props.getFetchData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>Hydrane ReactJS Frontend Dev CS</h1>\r\n          <Button \r\n          variant=\"contained\"   \r\n          color=\"secondary\"\r\n          onClick={this.GoButtonClicked}>\r\n            Go\r\n          </Button>\r\n        </header>\r\n        <Settings\r\n        changeContinentSetting={this.changeContinentSetting}\r\n        changeChartMaxSetting={this.changeChartMaxSetting}\r\n        changeMetricSetting={this.changeMetricSetting}\r\n        continents={this.state.continents}\r\n        selectedContinent={this.state.selectedContinent}\r\n        selectedChartMaxValue={this.state.selectedChartMaxValue}\r\n        selectedMetric={this.state.selectedMetric}\r\n        isDisabled={this.state.continents.length === 0}\r\n      />\r\n      {this.props.isPending && <CircularProgress/> }\r\n      {this.state.continents.length !== 0 &&\r\n      <div>\r\n        {this.state.selectedMetric === \"ALL\" ? \r\n        <div >\r\n          <PieChart \r\n          selectedMetric=\"areaInSqKm\"\r\n          data={this.state.geoData}\r\n          selectedChartMaxValue={this.state.selectedChartMaxValue}\r\n\r\n          />\r\n          <PieChart \r\n          selectedMetric=\"population\"\r\n          data={this.state.geoData}\r\n          selectedChartMaxValue={this.state.selectedChartMaxValue}\r\n          />\r\n        </div> : \r\n        <PieChart \r\n          selectedMetric={this.state.selectedMetric}\r\n          data={this.state.geoData}\r\n          selectedChartMaxValue={this.state.selectedChartMaxValue}\r\n        />} \r\n        <StatisticsTable \r\n          data={this.state.geoData}\r\n          selectedChartMaxValue={this.state.selectedChartMaxValue}\r\n          metric={this.state.selectedMetric}\r\n        />\r\n      </div>}\r\n      \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    geoData: state.geoData,\r\n    isPending: state.isPending\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getFetchData: () => dispatch(getFetchData())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { REQUEST_PENDING, REQUEST_SUCCESS, REQUEST_FAILED } from \"./constants\"\r\n\r\nexport function getFetchData() {\r\n    return dispatch => {\r\n        dispatch({ type: REQUEST_PENDING })\r\n        fetch('http://api.geonames.org/countryInfoJSON?formatted=true&username=hydrane')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_SUCCESS, data }))\r\n        .catch(error => dispatch({ type : REQUEST_FAILED, payload : error }))\r\n    }\r\n}","export const REQUEST_SUCCESS = \"REQUEST_SUCCESS\";\r\nexport const REQUEST_PENDING = \"REQUEST_pENDING\";\r\nexport const REQUEST_FAILED = \"REQUEST_FAILED\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { REQUEST_PENDING, REQUEST_SUCCESS, REQUEST_FAILED } from './constants';\r\n\r\nconst initialState = {\r\n    names: [],\r\n    geoData: [],\r\n    isPending: false\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case REQUEST_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n\r\n        case REQUEST_SUCCESS: \r\n            return Object.assign({},\r\n                state, {\r\n                geoData: action.data.geonames,\r\n                isPending: false\r\n            });\r\n\r\n        case REQUEST_FAILED:\r\n            return Object.assign({}, state, { isPending:false })\r\n\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport reducer from './store/reducers';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nReactDOM.render(<Provider store={createStore(reducer, applyMiddleware(thunk))}> \r\n                    <App />\r\n                </Provider>, \r\n                document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}